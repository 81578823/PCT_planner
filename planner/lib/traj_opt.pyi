from __future__ import annotations
import traj_opt
import typing
import numpy
_Shape = typing.Tuple[int, ...]

__all__ = [
    "GPMPOptimizer",
    "GPMPOptimizerWnoa"
]


class GPMPOptimizer():
    def __init__(self) -> None: ...
    def get_ceilings(self) -> numpy.ndarray[numpy.float64, _Shape[m, 1]]: ...
    def get_heading_rate(self) -> numpy.ndarray[numpy.float64, _Shape[m, 1]]: ...
    def get_heights(self) -> numpy.ndarray[numpy.float64, _Shape[m, 1]]: ...
    def get_layers(self) -> numpy.ndarray[numpy.float64, _Shape[m, 1]]: ...
    def get_opt_init_layer(self) -> numpy.ndarray[numpy.float64, _Shape[m, n]]: ...
    def get_opt_init_value(self) -> numpy.ndarray[numpy.float64, _Shape[m, n]]: ...
    def get_result_matrix(self) -> numpy.ndarray[numpy.float64, _Shape[m, n]]: ...
    def set_debug(self, arg0: bool) -> None: ...
    pass
class GPMPOptimizerWnoa():
    def __init__(self) -> None: ...
    def get_heights(self) -> numpy.ndarray[numpy.float64, _Shape[m, 1]]: ...
    def get_layers(self) -> numpy.ndarray[numpy.float64, _Shape[m, 1]]: ...
    def get_opt_init_layer(self) -> numpy.ndarray[numpy.float64, _Shape[m, n]]: ...
    def get_opt_init_value(self) -> numpy.ndarray[numpy.float64, _Shape[m, n]]: ...
    def get_result_matrix(self) -> numpy.ndarray[numpy.float64, _Shape[m, n]]: ...
    def gp_prior_test(self, arg0: numpy.ndarray[numpy.float64, _Shape[4, 1]], arg1: numpy.ndarray[numpy.float64, _Shape[4, 1]], arg2: float, arg3: int) -> numpy.ndarray[numpy.float64, _Shape[m, n]]: ...
    def set_debug(self, arg0: bool) -> None: ...
    pass
